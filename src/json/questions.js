let questionsJSON =
[
  {
    "id": 242,
    "text": "React - это:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 932,
        "text": "фреймворк для создания UI"
      },
      {
        "id": 933,
        "text": "библиотека для создания UI"
      },
      {
        "id": 934,
        "text": "платформа для создания UI"
      },
      {
        "id": 935,
        "text": "утилита для создания UI"
      }
    ]
  },
  {
    "id": 243,
    "text": "За отрисовку в react-приложении отвечает следующая конструкция:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 936,
        "text": "Библиотека virtual-dom и метод render. (VirtualDOM.render()) "
      },
      {
        "id": 937,
        "text": "Библиотека react-dom и метод render. (ReactDOM.render()) "
      },
      {
        "id": 938,
        "text": "Библиотека render-dom и метод render. (RenderDom.render()) "
      },
      {
        "id": 939,
        "text": "Библиотека react и метод renderElement. (React.renderElement()) "
      }
    ]
  },
  {
    "id": 245,
    "text": "Базовыми концепциями react являются:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 940,
        "text": "Компонентный подход, виртуальный DOM (дерево react-элементов), модульные стили, методы жизненного цикла"
      },
      {
        "id": 941,
        "text": "Компонентный подход, однонаправленный поток данных, JSX, global state приложения (redux/mobX)"
      },
      {
        "id": 946,
        "text": "Однонаправленный поток данных, виртуальный DOM (дерево react-элементов), использование webpack и react-scripts, JSX"
      },
      {
        "id": 947,
        "text": "Однонаправленный поток данных, виртуальный DOM (дерево react-элементов), методы жизненного цикла, react-hooks"
      }
    ]
  },
  {
    "id": 244,
    "text": "Выберите верное утверждение:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 942,
        "text": "React - элементы принимают произвольные props и возвращают react - компоненты"
      },
      {
        "id": 943,
        "text": "React - элементы принимают произвольные react - компоненты и возвращают props"
      },
      {
        "id": 944,
        "text": "React - компоненты принимают произвольные react - элементы и возвращают props"
      },
      {
        "id": 945,
        "text": "React - компоненты принимают произвольные props и возвращают react - элементы"
      }
    ]
  },
  {
    "id": 248,
    "text": "Выберите верные утверждения для state:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 948,
        "text": "Состояние можно изменить как с помощью setState, так и с помощью присвоения значения напрямую"
      },
      {
        "id": 949,
        "text": "Состояние является локальным относительно компонента и доступно только внутри компонента"
      },
      {
        "id": 950,
        "text": "setState в качестве параметра может принимать значение совпадающее по типу  с текущим значением"
      },
      {
        "id": 951,
        "text": "Вызов setState - это асинхронная операция и react самостоятельно определяет оптимальный момент для обновления компонентов"
      }
    ]
  },
  {
    "id": 247,
    "text": "Выберите верные утверждения для props:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 952,
        "text": "props - это объект, свойства которого можно изменять внутри компонента"
      },
      {
        "id": 953,
        "text": "props - это объект, свойства которого доступны только для чтения внутри компонента"
      },
      {
        "id": 954,
        "text": "изменения props вызывают перерисовку компонента и всех его потомков"
      },
      {
        "id": 955,
        "text": "объект props имеет ограничение на размер и не может содержать больше 10 свойств"
      }
    ]
  },
  {
    "id": 246,
    "text": "Выберите верные утверждения:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 956,
        "text": "Каждый JSX тег имеет альтернативное представление в виде вызова функции React.createElement(...)"
      },
      {
        "id": 957,
        "text": "В JSX можно использовать стандартные атрибуты по аналогии с HTML (tabindex, readonly, class и т.д.)"
      },
      {
        "id": 958,
        "text": "Конечным результатом преобразований тегов JSX будут обычные JavaScript объекты, описывающие соответствующие узлы"
      },
      {
        "id": 959,
        "text": "Каждый тег JSX это обычный тег HTML"
      }
    ]
  },
  {
    "id": 251,
    "text": "Этапы жизненного цикла включают в себя:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 960,
        "text": "initialization (инициализация), render (отрисовка), updation (обновление), unmounting (размонтирование)"
      },
      {
        "id": 961,
        "text": "installation (установка), mounting (монтирование), render (отрисовка), unmounting (размонтирование)"
      },
      {
        "id": 962,
        "text": "initialization (инициализация), mounting (монтирование),render (отрисовка), unmounting (размонтирование)"
      },
      {
        "id": 963,
        "text": "initialization (инициализация), mounting (монтирование), updation (обновление), unmounting (размонтирование)"
      }
    ]
  },
  {
    "id": 249,
    "text": "Какой из предложенных вариантов использования хука useEffect() реализует метод жизненного цикла componentDidUpdate:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 964,
        "text": "useEffect( () =\u003e { \t…  исполняемый код }, [ ] );"
      },
      {
        "id": 965,
        "text": "useEffect( () =\u003e { \t…  исполняемый код  \treturn( ()=\u003e { \t\t…  исполняемый код  \t\t}); }, [ ] );"
      },
      {
        "id": 966,
        "text": "useEffect( () =\u003e { \t…  исполняемый код зависящий от переменной value }, [value] );"
      },
      {
        "id": 967,
        "text": "Ни один из перечисленных"
      }
    ]
  },
  {
    "id": 250,
    "text": "Выберите верные утверждения:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 968,
        "text": "функциональные компоненты могут быть определены только с помощью стрелочных функций"
      },
      {
        "id": 969,
        "text": "функциональные компоненты не имеют доступа к локальному состоянию"
      },
      {
        "id": 970,
        "text": "функциональные компоненты обязаны возвращать некое значение (react-элементы, react-компоненты и т.д.)"
      },
      {
        "id": 971,
        "text": "только функциональные компоненты имеют доступ к react hooks "
      }
    ]
  },
  {
    "id": 252,
    "text": "Какой из предложенных вариантов использования хука useEffect() реализует метод жизненного цикла componentDidMount:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 972,
        "text": "useEffect( () =\u003e { \t…  исполняемый код }, [ ] );"
      },
      {
        "id": 973,
        "text": "useEffect( () =\u003e { \t…  исполняемый код  \treturn( ()=\u003e { \t\t…  исполняемый код  \t\t}); }, [ ] );"
      },
      {
        "id": 974,
        "text": "useEffect( () =\u003e { \t…  исполняемый код зависящий от переменной value }, [value] );"
      },
      {
        "id": 975,
        "text": "Ни один из перечисленных"
      }
    ]
  },
  {
    "id": 253,
    "text": "Какой из предложенных вариантов использования хука useEffect() реализует метод жизненного цикла componentWillUnmount:",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 976,
        "text": "useEffect( () =\u003e { \t…  исполняемый код }, [ ] );"
      },
      {
        "id": 977,
        "text": "useEffect( () =\u003e { \t…  исполняемый код  \treturn( ()=\u003e { \t\t…  исполняемый код  \t\t}); }, [ ] );"
      },
      {
        "id": 978,
        "text": "useEffect( () =\u003e { \t…  исполняемый код зависящий от переменной value }, [value] );"
      },
      {
        "id": 979,
        "text": "Ни один из перечисленных"
      }
    ]
  },
  {
    "id": 254,
    "text": "Выберите верные утверждения о хуке useRef:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 980,
        "text": "В useRef можно положить только ссылку на DOM-элемент"
      },
      {
        "id": 981,
        "text": "Изменение свойство current вызывает перерисовку компонента"
      },
      {
        "id": 982,
        "text": "Объект возвращаемый хуком, содержит единственное свойство current"
      },
      {
        "id": 983,
        "text": "Изменение свойство current не будет вызывать перерисовку компонента"
      }
    ]
  },
  {
    "id": 255,
    "text": "Какой метод жизненного цикла компонента лучше всего подходит для выполнения сайд-эффектов?",
    "isOpen": false,
    "isMultiple": false,
    "pic": null,
    "answer": [
      {
        "id": 984,
        "text": "componentWillMount"
      },
      {
        "id": 985,
        "text": "shoudComponentUpdate"
      },
      {
        "id": 986,
        "text": "componentDidUnmount"
      },
      {
        "id": 987,
        "text": "componentDidMount"
      }
    ]
  },
  {
    "id": 256,
    "text": "Выберите верные утверждения:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 988,
        "text": "хуки можно вызывать внутри условий и циклов"
      },
      {
        "id": 989,
        "text": "хуки не могут быть использованы в классовом компоненте"
      },
      {
        "id": 990,
        "text": "один хук можно вызывать несколько раз в одном компоненте"
      },
      {
        "id": 991,
        "text": "все хуки являются “чистыми функциями”"
      }
    ]
  },
  {
    "id": 257,
    "text": "Выберите верные утверждения. Компонент будет перерисован:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 992,
        "text": "при изменении локального состояния компонента"
      },
      {
        "id": 993,
        "text": "при перерисовке родительского компонента"
      },
      {
        "id": 994,
        "text": "при перерисовке дочернего компонента"
      },
      {
        "id": 995,
        "text": "при изменении props компонента"
      }
    ]
  },
  {
    "id": 258,
    "text": "Какая критическая ошибка допущена на представленном фрагменте кода возвращаемом из react-компонента?",
    "isOpen": false,
    "isMultiple": false,
    "pic": {
      "src": "https://165104.selcdn.ru/hibrain_v2/png/b6119823-a37e-4ab7-94f8-2c6b7206aae3.png"
    },
    "answer": [
      {
        "id": 996,
        "text": "У элементов не указан key-prop необходимый для оптимального рендера"
      },
      {
        "id": 997,
        "text": "У HTML тега div нет атрибута className, а только class"
      },
      {
        "id": 998,
        "text": "Возвращаемые из компонента react-элементы должны иметь один общий родительский элемент"
      },
      {
        "id": 999,
        "text": "Ни один из перечисленных"
      }
    ]
  },
  {
    "id": 259,
    "text": "Выберите верные утверждения o Redux",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 1000,
        "text": "Redux - это универсальное средство разработки, которое может быть использовано в связке с различными библиотеками и фреймворками"
      },
      {
        "id": 1001,
        "text": "Redux - это хранилище, которое позволяет хранить информацию в приложении и сохраняет ее даже после перезагрузки страницы"
      },
      {
        "id": 1002,
        "text": "Redux при каждом изменении store redux возвращает новый объект store"
      },
      {
        "id": 1007,
        "text": "Redux в своей реализации опирается на функционал предоставляемый React (react-hooks, HOC и тд), и не может работать без него"
      }
    ]
  },
  {
    "id": 260,
    "text": "Выберите верные утверждения o Redux:",
    "isOpen": false,
    "isMultiple": true,
    "pic": null,
    "answer": [
      {
        "id": 1003,
        "text": "selectors - это функции возвращающие информацию из store"
      },
      {
        "id": 1004,
        "text": "action - это объект содержащий как минимум одно обязательное свойство ‘type’"
      },
      {
        "id": 1005,
        "text": "dispatch - чистая функция отвечающая за обновление store"
      },
      {
        "id": 1006,
        "text": "reducer -  метод вызывающий dispatch и передающий в него action"
      }
    ]
  },
  {
    "id": 261,
    "text": "Какая ошибка допущена в представленном ниже коде при работе со списками в react?",
    "isOpen": false,
    "isMultiple": false,
    "pic": {
      "src": "https://165104.selcdn.ru/hibrain_v2/png/1c806e41-473f-4391-a999-25d7f1e75b61.png"
    },
    "answer": [
      {
        "id": 1008,
        "text": "Данная конструкция не валидна и код не выполнится"
      },
      {
        "id": 1009,
        "text": "У элементов списка не указан key-props необходимый для оптимального рендера"
      },
      {
        "id": 1010,
        "text": "Возвращаемые из компонента react-элементы должны иметь один общий родительский элемент"
      },
      {
        "id": 1011,
        "text": "У el указан тип any из-за этого код не выполнится"
      }
    ]
  }
]

export default questionsJSON;